library(StatModBayes)
library(StatModBayes)
?dbinom
?dpois
library(StatModBayes)
_?dmvnorm
?dmvnorm
?DNORM
?dnorm
?dbniom
?dbinom
?dois
?dpois
?model.matrix
?model.frame
model.frame(dist ~ speed, data = cars))
model.frame(dist ~ speed, data = cars)
model.frame(dist ~ speed, data = cars)[, 1]
model.frame(dist ~ speed, data = cars)[, 1, drop = FALSE]
model.matrix(dist ~ speed, data = cars)[, 1, drop = FALSE]
model.matrix(dist ~ speed, data = cars)
library(StatModBayes)
n <- 100
x <- cbind(1, rnorm(n), rnorm(n))
y <- rbinom(n, 1, expit(x %*% matrix(c(0.5, -0.1, -0.2), ncol = 1)))
library(StatModBayes)
n <- 100
x <- cbind(1, rnorm(n), rnorm(n))
y <- rbinom(n, 1, expit(x %*% matrix(c(0.5, -0.1, -0.2), ncol = 1)))
fit <- wrapper(y ~ x, model = "normal")
library(StatModBayes)
fit <- wrapper(y ~ x, model = "normal")
fit <- wrapper(y ~ x, model = "normal")
library(StatModBayes)
library(StatModBayes)
fit <- wrapper(y ~ x, model = "normal")
library(StatModBayes)
fit <- wrapper(y ~ x, model = "normal")
formula = y ~ x
model = "normal"
data = NULL
N = 2000
controls = list(mu_beta = 0, sigmasq_beta = 100,
phi_sigmasq_inv = 0.01, delta_sigmasq_inv = 10,
sigma_p = 0.2, df = 4)
x <- model.matrix(object = formula, data = data)
y <- model.frame(formula = formula, data = data)[, 1, drop = FALSE]
head()
head(x)
formula = y ~ -1 + x
x <- model.matrix(object = formula, data = data)
fit <- wrapper(formula = y ~ x1 + x2, data = data, model = "normal")
data <- data.frame(y = y, x1 = x[, 2], x2 = x[, 3])
fit <- wrapper(formula = y ~ x1 + x2, data = data, model = "normal")
formula = y ~ x1 + x2
data = data
x <- model.matrix(object = formula, data = data)
y <- model.frame(formula = formula, data = data)[, 1, drop = FALSE]
head(x)
n <- 100
xmat <- cbind(1, rnorm(n), rnorm(n))
y <- rbinom(n, 1, expit(xmat %*% matrix(c(0.5, -0.1, -0.2), ncol = 1)))
head(xmat)
n <- 100
xmat <- cbind(1, rnorm(n), rnorm(n))
y <- rbinom(n, 1, expit(xmat %*% matrix(c(0.5, -0.1, -0.2), ncol = 1)))
data <- data.frame(y = y, x1 = xmat[, 2], x2 = xmat[, 3])
x <- model.matrix(object = formula, data = data)
y <- model.frame(formula = formula, data = data)[, 1, drop = FALSE]
head()
head()
head(x)
head(y)
y <- rnorm(n, xmat %*% c(0.5, -0.1, -0.2), 2)
n <- 100
xmat <- cbind(1, rnorm(n), rnorm(n))
ymat <- rnorm(n, xmat %*% c(0.5, -0.1, -0.2), 2)
data <- data.frame(y = ymat, x1 = xmat[, 2], x2 = xmat[, 3])
n <- 100
xmat <- cbind(1, rnorm(n), rnorm(n))
ymat <- rnorm(n, xmat %*% c(0.5, -0.1, -0.2), 2)
data <- data.frame(yvar = ymat, x1 = xmat[, 2], x2 = xmat[, 3])
fit <- wrapper(formula = yvar ~ x1 + x2, data = data, model = "normal")
formula = yvar ~ x1 + x2
x <- model.matrix(object = formula, data = data)
y <- model.frame(formula = formula, data = data)[, 1, drop = FALSE]
head(x)
head(y)
out <- mh(y = y, x = x, N = N, model = model, controls = controls)
aargs(mh)
args(mh)
p <- ncol(x)
beta0 <- rep(0, p)
p
param_beta <- list(mu = rep(controls$mu_beta, p), Sigma = controls$sigmasq_beta * diag(p))
if(model == "normal"){
param_sigmasq_inv <- list(phi = controls$phi_sigmasq_inv, delta = controls$delta_sigmasq_inv)
}
param_beta
param_sigmasq_inv
save_beta <- matrix(0, ncol = p, nrow = N)
save_beta[1, ] <- beta0
if(model == "normal"){
save_log_sigmasq_inv <- matrix(0, nrow = N, ncol = 1)
}
save_log_sigmasq_inv
accept <- 0
i <- 1
beta_star <- save_beta[i, ] + controls$sigma_p * rt(p, controls$df)
beta_star
log_sigmasq_inv_star <- save_log_sigmasq_inv[i, ] + controls$sigma_p * rt(p, controls$df)
mh_ratio_upp <- log_posterior(y = y, x = x, sigmasq_inv = exp(log_sigmasq_inv_star),
param_sigmasq_inv = controls$param_sigmasq_inv,
beta = beta_star, param_beta = controls$param_beta,
model = model)
mh_ratio_low <- log_posterior(y = y, x = x, sigmasq_inv = exp(save_log_sigmasq_inv[i, ]),
param_sigmasq_inv = controls$param_sigmasq_inv,
beta = save_beta[i, ], param_beta = controls$param_beta,
model = model)
sigmasq_inv = exp(log_sigmasq_inv_star)
param_sigmasq_inv = controls$param_sigmasq_inv
beta = beta_star
param_beta = controls$param_beta
out <- log_likelihood(y = y, x = x, beta = beta, sigmasq_inv = sigmasq_inv, model = model) +
log_prior(beta = beta, param_beta = param_beta, sigmasq_inv = sigmasq_inv,
param_sigmasq_inv = param_sigmasq_inv, model = model)
log_likelihood(y = y, x = x, beta = beta, sigmasq_inv = sigmasq_inv, model = model)
log_prior(beta = beta, param_beta = param_beta, sigmasq_inv = sigmasq_inv,
param_sigmasq_inv = param_sigmasq_inv, model = model)
?dmvnorm
library(StatModBayes)
log_prior(beta = beta, param_beta = param_beta, sigmasq_inv = sigmasq_inv,
param_sigmasq_inv = param_sigmasq_inv, model = model)
beta
param_beta$mu
controls$param_beta
mh_ratio_upp <- log_posterior(y = y, x = x, sigmasq_inv = exp(log_sigmasq_inv_star),
param_sigmasq_inv = param_sigmasq_inv,
beta = beta_star, param_beta = param_beta,
model = model)
mh_ratio_low <- log_posterior(y = y, x = x, sigmasq_inv = exp(save_log_sigmasq_inv[i, ]),
param_sigmasq_inv = param_sigmasq_inv,
beta = save_beta[i, ], param_beta = param_beta,
model = model)
param_beta
param_beta <- list(mu = rep(controls$mu_beta, p), Sigma = controls$sigmasq_beta * diag(p))
if(model == "normal"){
param_sigmasq_inv <- list(phi = controls$phi_sigmasq_inv, delta = controls$delta_sigmasq_inv)
}
param_beta
out <- log_likelihood(y = y, x = x, beta = beta, sigmasq_inv = sigmasq_inv, model = model) +
log_prior(beta = beta, param_beta = param_beta, sigmasq_inv = sigmasq_inv,
param_sigmasq_inv = param_sigmasq_inv, model = model)
log_prior(beta = beta, param_beta = param_beta, sigmasq_inv = sigmasq_inv,
param_sigmasq_inv = param_sigmasq_inv, model = model)
log_likelihood(y = y, x = x, beta = beta, sigmasq_inv = sigmasq_inv, model = model)
x%*%beta
sqrt(1/sigmasq_inv)
sigmasq_inv
log_sigmasq_inv_star <- save_log_sigmasq_inv[i, ] + controls$sigma_p * rt(1, controls$df)
sigmasq_inv = exp(save_log_sigmasq_inv[i, ])
log_likelihood(y = y, x = x, beta = beta, sigmasq_inv = sigmasq_inv, model = model)
sqrt(1/sigmasq_inv)
dnorm(x = y, mean = x %*% beta, sd = sqrt(1/sigmasq_inv), log = TRUE)
dnorm(x = y, mean = x %*% beta, sd = sqrt(1/sigmasq_inv), log = TRUE)
x%*%beta
dnorm(x = y, mean = x %*% beta, sd = sqrt(1/sigmasq_inv), log = TRUE)
sqrt(1/sigmasq_inv)
y
dnorm(x = y, mean = x %*% beta, sd = sqrt(1/sigmasq_inv), log = TRUE)
?dnorm
sqrt(1/sigmasq_inv)
dnorm(x = y, mean = x %*% beta, sd = sqrt(1/sigmasq_inv))
dnorm(x = y, mean = (x %*% beta), sd = sqrt(1/sigmasq_inv), log = TRUE)
class(y)
class(x %*% beta)
dnorm(x = as.matrix(y), mean = (x %*% beta), sd = sqrt(1/sigmasq_inv), log = TRUE)
?model.frame
y <- model.frame(formula = formula, data = data)[, 1] %*% as.matrix
y <- model.frame(formula = formula, data = data)[, 1] %*% matrix
y <- model.frame(formula = formula, data = data)[, 1] %>% matrix
y
library(StatModBayes)
fit <- wrapper(formula = yvar ~ x1 + x2, data = data, model = "normal")
